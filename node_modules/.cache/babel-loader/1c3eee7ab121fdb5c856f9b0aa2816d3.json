{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.ResizeObserver = factory();\n})(this, function () {\n  'use strict';\n  /**\r\n   * A collection of shims that provide minimal functionality of the ES6 collections.\r\n   *\r\n   * These implementations are not meant to be used outside of the ResizeObserver\r\n   * modules as they cover only a limited range of use cases.\r\n   */\n\n  /* eslint-disable require-jsdoc, valid-jsdoc */\n\n  var MapShim = function () {\n    if (typeof Map !== 'undefined') {\n      return Map;\n    }\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\n\n\n    function getIndex(arr, key) {\n      var result = -1;\n      arr.some(function (entry, index) {\n        if (entry[0] === key) {\n          result = index;\n          return true;\n        }\n\n        return false;\n      });\n      return result;\n    }\n\n    return function () {\n      function anonymous() {\n        this.__entries__ = [];\n      }\n\n      var prototypeAccessors = {\n        size: {\n          configurable: true\n        }\n      };\n      /**\r\n       * @returns {boolean}\r\n       */\n\n      prototypeAccessors.size.get = function () {\n        return this.__entries__.length;\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {*}\r\n       */\n\n\n      anonymous.prototype.get = function (key) {\n        var index = getIndex(this.__entries__, key);\n        var entry = this.__entries__[index];\n        return entry && entry[1];\n      };\n      /**\r\n       * @param {*} key\r\n       * @param {*} value\r\n       * @returns {void}\r\n       */\n\n\n      anonymous.prototype.set = function (key, value) {\n        var index = getIndex(this.__entries__, key);\n\n        if (~index) {\n          this.__entries__[index][1] = value;\n        } else {\n          this.__entries__.push([key, value]);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      anonymous.prototype.delete = function (key) {\n        var entries = this.__entries__;\n        var index = getIndex(entries, key);\n\n        if (~index) {\n          entries.splice(index, 1);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      anonymous.prototype.has = function (key) {\n        return !!~getIndex(this.__entries__, key);\n      };\n      /**\r\n       * @returns {void}\r\n       */\n\n\n      anonymous.prototype.clear = function () {\n        this.__entries__.splice(0);\n      };\n      /**\r\n       * @param {Function} callback\r\n       * @param {*} [ctx=null]\r\n       * @returns {void}\r\n       */\n\n\n      anonymous.prototype.forEach = function (callback, ctx) {\n        var this$1 = this;\n        if (ctx === void 0) ctx = null;\n\n        for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {\n          var entry = list[i];\n          callback.call(ctx, entry[1], entry[0]);\n        }\n      };\n\n      Object.defineProperties(anonymous.prototype, prototypeAccessors);\n      return anonymous;\n    }();\n  }();\n  /**\r\n   * Detects whether window and document objects are available in current environment.\r\n   */\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\n  var global$1 = function () {\n    if (typeof global !== 'undefined' && global.Math === Math) {\n      return global;\n    }\n\n    if (typeof self !== 'undefined' && self.Math === Math) {\n      return self;\n    }\n\n    if (typeof window !== 'undefined' && window.Math === Math) {\n      return window;\n    } // eslint-disable-next-line no-new-func\n\n\n    return Function('return this')();\n  }();\n  /**\r\n   * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n   * first one is not supported.\r\n   *\r\n   * @returns {number} Requests' identifier.\r\n   */\n\n\n  var requestAnimationFrame$1 = function () {\n    if (typeof requestAnimationFrame === 'function') {\n      // It's required to use a bounded function because IE sometimes throws\n      // an \"Invalid calling object\" error if rAF is invoked without the global\n      // object on the left hand side.\n      return requestAnimationFrame.bind(global$1);\n    }\n\n    return function (callback) {\n      return setTimeout(function () {\n        return callback(Date.now());\n      }, 1000 / 60);\n    };\n  }(); // Defines minimum timeout before adding a trailing call.\n\n\n  var trailingTimeout = 2;\n  /**\r\n   * Creates a wrapper function which ensures that provided callback will be\r\n   * invoked only once during the specified delay period.\r\n   *\r\n   * @param {Function} callback - Function to be invoked after the delay period.\r\n   * @param {number} delay - Delay after which to invoke callback.\r\n   * @returns {Function}\r\n   */\n\n  var throttle = function throttle(callback, delay) {\n    var leadingCall = false,\n        trailingCall = false,\n        lastCallTime = 0;\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\n\n    function resolvePending() {\n      if (leadingCall) {\n        leadingCall = false;\n        callback();\n      }\n\n      if (trailingCall) {\n        proxy();\n      }\n    }\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\n\n\n    function timeoutCallback() {\n      requestAnimationFrame$1(resolvePending);\n    }\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\n\n\n    function proxy() {\n      var timeStamp = Date.now();\n\n      if (leadingCall) {\n        // Reject immediately following calls.\n        if (timeStamp - lastCallTime < trailingTimeout) {\n          return;\n        } // Schedule new call to be in invoked when the pending one is resolved.\n        // This is important for \"transitions\" which never actually start\n        // immediately so there is a chance that we might miss one if change\n        // happens amids the pending invocation.\n\n\n        trailingCall = true;\n      } else {\n        leadingCall = true;\n        trailingCall = false;\n        setTimeout(timeoutCallback, delay);\n      }\n\n      lastCallTime = timeStamp;\n    }\n\n    return proxy;\n  }; // Minimum delay before invoking the update of observers.\n\n\n  var REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n  // might affect dimensions of observed elements.\n\n  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\n  var mutationObserverSupported = typeof MutationObserver !== 'undefined';\n  /**\r\n   * Singleton controller class which handles updates of ResizeObserver instances.\r\n   */\n\n  var ResizeObserverController = function ResizeObserverController() {\n    this.connected_ = false;\n    this.mutationEventsAdded_ = false;\n    this.mutationsObserver_ = null;\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  };\n  /**\r\n   * Adds observer to observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be added.\r\n   * @returns {void}\r\n   */\n\n  /**\r\n   * Holds reference to the controller's instance.\r\n   *\r\n   * @private {ResizeObserverController}\r\n   */\n\n  /**\r\n   * Keeps reference to the instance of MutationObserver.\r\n   *\r\n   * @private {MutationObserver}\r\n   */\n\n  /**\r\n   * Indicates whether DOM listeners have been added.\r\n   *\r\n   * @private {boolean}\r\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\r\n   * Removes observer from observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\r\n   * Invokes the update of observers. It will continue running updates insofar\r\n   * it detects changes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Updates every observer from observers list and notifies them of queued\r\n   * entries.\r\n   *\r\n   * @private\r\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n   *  dimensions of it's elements.\r\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\r\n   * Initializes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\r\n   * Removes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\r\n   * \"Transitionend\" event handler.\r\n   *\r\n   * @private\r\n   * @param {TransitionEvent} event\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (ref) {\n    var propertyName = ref.propertyName;\n    if (propertyName === void 0) propertyName = ''; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Returns instance of the ResizeObserverController.\r\n   *\r\n   * @returns {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n\n  ResizeObserverController.instance_ = null;\n  /**\r\n   * Defines non-writable/enumerable properties of the provided target object.\r\n   *\r\n   * @param {Object} target - Object for which to define properties.\r\n   * @param {Object} props - Properties to be defined.\r\n   * @returns {Object} Target object.\r\n   */\n\n  var defineConfigurable = function defineConfigurable(target, props) {\n    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {\n      var key = list[i];\n      Object.defineProperty(target, key, {\n        value: props[key],\n        enumerable: false,\n        writable: false,\n        configurable: true\n      });\n    }\n\n    return target;\n  };\n  /**\r\n   * Returns the global object associated with provided element.\r\n   *\r\n   * @param {Object} target\r\n   * @returns {Object}\r\n   */\n\n\n  var getWindowOf = function getWindowOf(target) {\n    // Assume that the element is an instance of Node, which means that it\n    // has the \"ownerDocument\" property from which we can retrieve a\n    // corresponding global object.\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n    // provided element.\n\n    return ownerGlobal || global$1;\n  }; // Placeholder of an empty content rectangle.\n\n\n  var emptyRect = createRectInit(0, 0, 0, 0);\n  /**\r\n   * Converts provided string to a number.\r\n   *\r\n   * @param {number|string} value\r\n   * @returns {number}\r\n   */\n\n  function toFloat(value) {\n    return parseFloat(value) || 0;\n  }\n  /**\r\n   * Extracts borders size from provided styles.\r\n   *\r\n   * @param {CSSStyleDeclaration} styles\r\n   * @param {...string} positions - Borders positions (top, right, ...)\r\n   * @returns {number}\r\n   */\n\n\n  function getBordersSize(styles) {\n    var positions = [],\n        len = arguments.length - 1;\n\n    while (len-- > 0) {\n      positions[len] = arguments[len + 1];\n    }\n\n    return positions.reduce(function (size, position) {\n      var value = styles['border-' + position + '-width'];\n      return size + toFloat(value);\n    }, 0);\n  }\n  /**\r\n   * Extracts paddings sizes from provided styles.\r\n   *\r\n   * @param {CSSStyleDeclaration} styles\r\n   * @returns {Object} Paddings box.\r\n   */\n\n\n  function getPaddings(styles) {\n    var positions = ['top', 'right', 'bottom', 'left'];\n    var paddings = {};\n\n    for (var i = 0, list = positions; i < list.length; i += 1) {\n      var position = list[i];\n      var value = styles['padding-' + position];\n      paddings[position] = toFloat(value);\n    }\n\n    return paddings;\n  }\n  /**\r\n   * Calculates content rectangle of provided SVG element.\r\n   *\r\n   * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n   *      to be calculated.\r\n   * @returns {DOMRectInit}\r\n   */\n\n\n  function getSVGContentRect(target) {\n    var bbox = target.getBBox();\n    return createRectInit(0, 0, bbox.width, bbox.height);\n  }\n  /**\r\n   * Calculates content rectangle of provided HTMLElement.\r\n   *\r\n   * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n   * @returns {DOMRectInit}\r\n   */\n\n\n  function getHTMLElementContentRect(target) {\n    // Client width & height properties can't be\n    // used exclusively as they provide rounded values.\n    var clientWidth = target.clientWidth;\n    var clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n    // detached elements. Though elements with width & height properties less\n    // than 0.5 will be discarded as well.\n    //\n    // Without it we would need to implement separate methods for each of\n    // those cases and it's not possible to perform a precise and performance\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n    // gives wrong results for elements with width & height less than 0.5.\n\n    if (!clientWidth && !clientHeight) {\n      return emptyRect;\n    }\n\n    var styles = getWindowOf(target).getComputedStyle(target);\n    var paddings = getPaddings(styles);\n    var horizPad = paddings.left + paddings.right;\n    var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n    // only dimensions available to JS that contain non-rounded values. It could\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n    var width = toFloat(styles.width),\n        height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n    // model is applied (except for IE).\n\n    if (styles.boxSizing === 'border-box') {\n      // Following conditions are required to handle Internet Explorer which\n      // doesn't include paddings and borders to computed CSS dimensions.\n      //\n      // We can say that if CSS dimensions + paddings are equal to the \"client\"\n      // properties then it's either IE, and thus we don't need to subtract\n      // anything, or an element merely doesn't have paddings/borders styles.\n      if (Math.round(width + horizPad) !== clientWidth) {\n        width -= getBordersSize(styles, 'left', 'right') + horizPad;\n      }\n\n      if (Math.round(height + vertPad) !== clientHeight) {\n        height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n      }\n    } // Following steps can't be applied to the document's root element as its\n    // client[Width/Height] properties represent viewport area of the window.\n    // Besides, it's as well not necessary as the <html> itself neither has\n    // rendered scroll bars nor it can be clipped.\n\n\n    if (!isDocumentElement(target)) {\n      // In some browsers (only in Firefox, actually) CSS width & height\n      // include scroll bars size which can be removed at this step as scroll\n      // bars are the only difference between rounded dimensions + paddings\n      // and \"client\" properties, though that is not always true in Chrome.\n      var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n      var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n      // E.g. for an element with content width of 314.2px it sometimes gives\n      // the client width of 315px and for the width of 314.7px it may give\n      // 314px. And it doesn't happen all the time. So just ignore this delta\n      // as a non-relevant.\n\n      if (Math.abs(vertScrollbar) !== 1) {\n        width -= vertScrollbar;\n      }\n\n      if (Math.abs(horizScrollbar) !== 1) {\n        height -= horizScrollbar;\n      }\n    }\n\n    return createRectInit(paddings.left, paddings.top, width, height);\n  }\n  /**\r\n   * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n   *\r\n   * @param {Element} target - Element to be checked.\r\n   * @returns {boolean}\r\n   */\n\n\n  var isSVGGraphicsElement = function () {\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n    // interface.\n    if (typeof SVGGraphicsElement !== 'undefined') {\n      return function (target) {\n        return target instanceof getWindowOf(target).SVGGraphicsElement;\n      };\n    } // If it's so, then check that element is at least an instance of the\n    // SVGElement and that it has the \"getBBox\" method.\n    // eslint-disable-next-line no-extra-parens\n\n\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n    };\n  }();\n  /**\r\n   * Checks whether provided element is a document element (<html>).\r\n   *\r\n   * @param {Element} target - Element to be checked.\r\n   * @returns {boolean}\r\n   */\n\n\n  function isDocumentElement(target) {\n    return target === getWindowOf(target).document.documentElement;\n  }\n  /**\r\n   * Calculates an appropriate content rectangle for provided html or svg element.\r\n   *\r\n   * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n   * @returns {DOMRectInit}\r\n   */\n\n\n  function getContentRect(target) {\n    if (!isBrowser) {\n      return emptyRect;\n    }\n\n    if (isSVGGraphicsElement(target)) {\n      return getSVGContentRect(target);\n    }\n\n    return getHTMLElementContentRect(target);\n  }\n  /**\r\n   * Creates rectangle with an interface of the DOMRectReadOnly.\r\n   * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n   *\r\n   * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n   * @returns {DOMRectReadOnly}\r\n   */\n\n\n  function createReadOnlyRect(ref) {\n    var x = ref.x;\n    var y = ref.y;\n    var width = ref.width;\n    var height = ref.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n    var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n    defineConfigurable(rect, {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      top: y,\n      right: x + width,\n      bottom: height + y,\n      left: x\n    });\n    return rect;\n  }\n  /**\r\n   * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n   * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n   *\r\n   * @param {number} x - X coordinate.\r\n   * @param {number} y - Y coordinate.\r\n   * @param {number} width - Rectangle's width.\r\n   * @param {number} height - Rectangle's height.\r\n   * @returns {DOMRectInit}\r\n   */\n\n\n  function createRectInit(x, y, width, height) {\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  }\n  /**\r\n   * Class that is responsible for computations of the content rectangle of\r\n   * provided DOM element and for keeping track of it's changes.\r\n   */\n\n\n  var ResizeObservation = function ResizeObservation(target) {\n    this.broadcastWidth = 0;\n    this.broadcastHeight = 0;\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  };\n  /**\r\n   * Updates content rectangle and tells whether it's width or height properties\r\n   * have changed since the last broadcast.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n  /**\r\n   * Reference to the last observed content rectangle.\r\n   *\r\n   * @private {DOMRectInit}\r\n   */\n\n  /**\r\n   * Broadcasted width of content rectangle.\r\n   *\r\n   * @type {number}\r\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\r\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n   * from the corresponding properties of the last observed content rectangle.\r\n   *\r\n   * @returns {DOMRectInit} Last observed content rectangle.\r\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  var ResizeObserverEntry = function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  };\n\n  var ResizeObserverSPI = function ResizeObserverSPI(callback, controller, callbackCtx) {\n    this.activeObservations_ = [];\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  };\n  /**\r\n   * Starts observing provided element.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   * @returns {void}\r\n   */\n\n  /**\r\n   * Registry of the ResizeObservation instances.\r\n   *\r\n   * @private {Map<Element, ResizeObservation>}\r\n   */\n\n  /**\r\n   * Public ResizeObserver instance which will be passed to the callback\r\n   * function and used as a value of it's \"this\" binding.\r\n   *\r\n   * @private {ResizeObserver}\r\n   */\n\n  /**\r\n   * Collection of resize observations that have detected changes in dimensions\r\n   * of elements.\r\n   *\r\n   * @private {Array<ResizeObservation>}\r\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\r\n   * Stops observing provided element.\r\n   *\r\n   * @param {Element} target - Element to stop observing.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\r\n   * Stops observing all elements.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\r\n   * Collects observation instances the associated element of which has changed\r\n   * it's content rectangle.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var this$1 = this;\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        this$1.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\r\n   * Invokes initial callback function with a list of ResizeObserverEntry\r\n   * instances collected from active resize observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\r\n   * Clears the collection of active observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\r\n   * Tells whether observer has active observations.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  }; // Registry of internal observers. If WeakMap is not available use current shim\n  // for the Map collection as it has all required methods and because WeakMap\n  // can't be fully polyfilled anyway.\n\n\n  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n  /**\r\n   * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n   * exposing only those methods and properties that are defined in the spec.\r\n   */\n\n  var ResizeObserver = function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }; // Expose public methods of ResizeObserver.\n\n\n  ['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n    ResizeObserver.prototype[method] = function () {\n      return (ref = observers.get(this))[method].apply(ref, arguments);\n      var ref;\n    };\n  });\n\n  var index = function () {\n    // Export existing implementation if available.\n    if (typeof global$1.ResizeObserver !== 'undefined') {\n      return global$1.ResizeObserver;\n    }\n\n    global$1.ResizeObserver = ResizeObserver;\n    return ResizeObserver;\n  }();\n\n  return index;\n});","map":{"version":3,"sources":["C:/Users/demon/PycharmProjects/datamozg/node_modules/resize-observer-polyfill/dist/ResizeObserver.global.js"],"names":["global","factory","exports","module","define","amd","ResizeObserver","MapShim","Map","getIndex","arr","key","result","some","entry","index","anonymous","__entries__","prototypeAccessors","size","configurable","get","length","prototype","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","this$1","i","list","call","Object","defineProperties","isBrowser","window","document","global$1","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","throttle","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","changesDetected","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","ref","propertyName","isReflowProperty","getInstance","instance_","defineConfigurable","target","props","keys","defineProperty","enumerable","writable","getWindowOf","ownerGlobal","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","len","arguments","reduce","position","getPaddings","paddings","getSVGContentRect","bbox","getBBox","width","height","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","horizPad","left","right","vertPad","top","bottom","boxSizing","round","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","documentElement","getContentRect","createReadOnlyRect","x","y","Constr","DOMRectReadOnly","rect","create","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","broadcastRect","ResizeObserverEntry","rectInit","contentRect","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","observation","map","WeakMap","method","apply"],"mappings":"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","sourcesContent":["(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n    typeof define === 'function' && define.amd ? define(factory) :\r\n    (global.ResizeObserver = factory());\r\n}(this, (function () { 'use strict';\r\n\r\n/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return (function () {\r\n        function anonymous() {\r\n            this.__entries__ = [];\r\n        }\r\n\r\n        var prototypeAccessors = { size: { configurable: true } };\r\n\r\n        /**\r\n         * @returns {boolean}\r\n         */\r\n        prototypeAccessors.size.get = function () {\r\n            return this.__entries__.length;\r\n        };\r\n\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        anonymous.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n\r\n            return entry && entry[1];\r\n        };\r\n\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            } else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        anonymous.prototype.forEach = function (callback, ctx) {\r\n            var this$1 = this;\r\n            if ( ctx === void 0 ) ctx = null;\r\n\r\n            for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {\r\n                var entry = list[i];\r\n\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n\r\n        Object.defineProperties( anonymous.prototype, prototypeAccessors );\r\n\r\n        return anonymous;\r\n    }());\r\n})();\r\n\r\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\r\n\r\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\r\n\r\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\r\n\r\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nvar throttle = function (callback, delay) {\r\n    var leadingCall = false,\r\n        trailingCall = false,\r\n        lastCallTime = 0;\r\n\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n\r\n            callback();\r\n        }\r\n\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        } else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n\r\n        lastCallTime = timeStamp;\r\n    }\r\n\r\n    return proxy;\r\n};\r\n\r\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = function() {\r\n    this.connected_ = false;\r\n    this.mutationEventsAdded_ = false;\r\n    this.mutationsObserver_ = null;\r\n    this.observers_ = [];\r\n\r\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n};\r\n\r\n/**\r\n * Adds observer to observers list.\r\n *\r\n * @param {ResizeObserverSPI} observer - Observer to be added.\r\n * @returns {void}\r\n */\r\n\r\n\r\n/**\r\n * Holds reference to the controller's instance.\r\n *\r\n * @private {ResizeObserverController}\r\n */\r\n\r\n\r\n/**\r\n * Keeps reference to the instance of MutationObserver.\r\n *\r\n * @private {MutationObserver}\r\n */\r\n\r\n/**\r\n * Indicates whether DOM listeners have been added.\r\n *\r\n * @private {boolean}\r\n */\r\nResizeObserverController.prototype.addObserver = function (observer) {\r\n    if (!~this.observers_.indexOf(observer)) {\r\n        this.observers_.push(observer);\r\n    }\r\n\r\n    // Add listeners if they haven't been added yet.\r\n    if (!this.connected_) {\r\n        this.connect_();\r\n    }\r\n};\r\n\r\n/**\r\n * Removes observer from observers list.\r\n *\r\n * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.removeObserver = function (observer) {\r\n    var observers = this.observers_;\r\n    var index = observers.indexOf(observer);\r\n\r\n    // Remove observer if it's present in registry.\r\n    if (~index) {\r\n        observers.splice(index, 1);\r\n    }\r\n\r\n    // Remove listeners if controller has no connected observers.\r\n    if (!observers.length && this.connected_) {\r\n        this.disconnect_();\r\n    }\r\n};\r\n\r\n/**\r\n * Invokes the update of observers. It will continue running updates insofar\r\n * it detects changes.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.refresh = function () {\r\n    var changesDetected = this.updateObservers_();\r\n\r\n    // Continue running updates if changes have been detected as there might\r\n    // be future ones caused by CSS transitions.\r\n    if (changesDetected) {\r\n        this.refresh();\r\n    }\r\n};\r\n\r\n/**\r\n * Updates every observer from observers list and notifies them of queued\r\n * entries.\r\n *\r\n * @private\r\n * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n *  dimensions of it's elements.\r\n */\r\nResizeObserverController.prototype.updateObservers_ = function () {\r\n    // Collect observers that have active observations.\r\n    var activeObservers = this.observers_.filter(function (observer) {\r\n        return observer.gatherActive(), observer.hasActive();\r\n    });\r\n\r\n    // Deliver notifications in a separate cycle in order to avoid any\r\n    // collisions between observers, e.g. when multiple instances of\r\n    // ResizeObserver are tracking the same element and the callback of one\r\n    // of them changes content dimensions of the observed target. Sometimes\r\n    // this may result in notifications being blocked for the rest of observers.\r\n    activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n\r\n    return activeObservers.length > 0;\r\n};\r\n\r\n/**\r\n * Initializes DOM listeners.\r\n *\r\n * @private\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.connect_ = function () {\r\n    // Do nothing if running in a non-browser environment or if listeners\r\n    // have been already added.\r\n    if (!isBrowser || this.connected_) {\r\n        return;\r\n    }\r\n\r\n    // Subscription to the \"Transitionend\" event is used as a workaround for\r\n    // delayed transitions. This way it's possible to capture at least the\r\n    // final state of an element.\r\n    document.addEventListener('transitionend', this.onTransitionEnd_);\r\n\r\n    window.addEventListener('resize', this.refresh);\r\n\r\n    if (mutationObserverSupported) {\r\n        this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n\r\n        this.mutationsObserver_.observe(document, {\r\n            attributes: true,\r\n            childList: true,\r\n            characterData: true,\r\n            subtree: true\r\n        });\r\n    } else {\r\n        document.addEventListener('DOMSubtreeModified', this.refresh);\r\n\r\n        this.mutationEventsAdded_ = true;\r\n    }\r\n\r\n    this.connected_ = true;\r\n};\r\n\r\n/**\r\n * Removes DOM listeners.\r\n *\r\n * @private\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.disconnect_ = function () {\r\n    // Do nothing if running in a non-browser environment or if listeners\r\n    // have been already removed.\r\n    if (!isBrowser || !this.connected_) {\r\n        return;\r\n    }\r\n\r\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n    window.removeEventListener('resize', this.refresh);\r\n\r\n    if (this.mutationsObserver_) {\r\n        this.mutationsObserver_.disconnect();\r\n    }\r\n\r\n    if (this.mutationEventsAdded_) {\r\n        document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n    }\r\n\r\n    this.mutationsObserver_ = null;\r\n    this.mutationEventsAdded_ = false;\r\n    this.connected_ = false;\r\n};\r\n\r\n/**\r\n * \"Transitionend\" event handler.\r\n *\r\n * @private\r\n * @param {TransitionEvent} event\r\n * @returns {void}\r\n */\r\nResizeObserverController.prototype.onTransitionEnd_ = function (ref) {\r\n        var propertyName = ref.propertyName; if ( propertyName === void 0 ) propertyName = '';\r\n\r\n    // Detect whether transition may affect dimensions of an element.\r\n    var isReflowProperty = transitionKeys.some(function (key) {\r\n        return !!~propertyName.indexOf(key);\r\n    });\r\n\r\n    if (isReflowProperty) {\r\n        this.refresh();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns instance of the ResizeObserverController.\r\n *\r\n * @returns {ResizeObserverController}\r\n */\r\nResizeObserverController.getInstance = function () {\r\n    if (!this.instance_) {\r\n        this.instance_ = new ResizeObserverController();\r\n    }\r\n\r\n    return this.instance_;\r\n};\r\n\r\nResizeObserverController.instance_ = null;\r\n\r\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {\r\n        var key = list[i];\r\n\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n    return target;\r\n});\r\n\r\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\r\n\r\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [], len = arguments.length - 1;\r\n    while ( len-- > 0 ) positions[ len ] = arguments[ len + 1 ];\r\n\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n\r\n    for (var i = 0, list = positions; i < list.length; i += 1) {\r\n        var position = list[i];\r\n\r\n        var value = styles['padding-' + position];\r\n\r\n        paddings[position] = toFloat(value);\r\n    }\r\n\r\n    return paddings;\r\n}\r\n\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth;\r\n    var clientHeight = target.clientHeight;\r\n\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width),\r\n        height = toFloat(styles.height);\r\n\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function'; };\r\n})();\r\n\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n\r\n    return getHTMLElementContentRect(target);\r\n}\r\n\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(ref) {\r\n    var x = ref.x;\r\n    var y = ref.y;\r\n    var width = ref.width;\r\n    var height = ref.height;\r\n\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n\r\n    return rect;\r\n}\r\n\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\r\n\r\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = function(target) {\r\n    this.broadcastWidth = 0;\r\n    this.broadcastHeight = 0;\r\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n\r\n    this.target = target;\r\n};\r\n\r\n/**\r\n * Updates content rectangle and tells whether it's width or height properties\r\n * have changed since the last broadcast.\r\n *\r\n * @returns {boolean}\r\n */\r\n\r\n\r\n/**\r\n * Reference to the last observed content rectangle.\r\n *\r\n * @private {DOMRectInit}\r\n */\r\n\r\n\r\n/**\r\n * Broadcasted width of content rectangle.\r\n *\r\n * @type {number}\r\n */\r\nResizeObservation.prototype.isActive = function () {\r\n    var rect = getContentRect(this.target);\r\n\r\n    this.contentRect_ = rect;\r\n\r\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\r\n};\r\n\r\n/**\r\n * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n * from the corresponding properties of the last observed content rectangle.\r\n *\r\n * @returns {DOMRectInit} Last observed content rectangle.\r\n */\r\nResizeObservation.prototype.broadcastRect = function () {\r\n    var rect = this.contentRect_;\r\n\r\n    this.broadcastWidth = rect.width;\r\n    this.broadcastHeight = rect.height;\r\n\r\n    return rect;\r\n};\r\n\r\nvar ResizeObserverEntry = function(target, rectInit) {\r\n    var contentRect = createReadOnlyRect(rectInit);\r\n\r\n    // According to the specification following properties are not writable\r\n    // and are also not enumerable in the native implementation.\r\n    //\r\n    // Property accessors are not being used as they'd require to define a\r\n    // private WeakMap storage which may cause memory leaks in browsers that\r\n    // don't support this type of collections.\r\n    defineConfigurable(this, { target: target, contentRect: contentRect });\r\n};\r\n\r\nvar ResizeObserverSPI = function(callback, controller, callbackCtx) {\r\n    this.activeObservations_ = [];\r\n    this.observations_ = new MapShim();\r\n\r\n    if (typeof callback !== 'function') {\r\n        throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n    }\r\n\r\n    this.callback_ = callback;\r\n    this.controller_ = controller;\r\n    this.callbackCtx_ = callbackCtx;\r\n};\r\n\r\n/**\r\n * Starts observing provided element.\r\n *\r\n * @param {Element} target - Element to be observed.\r\n * @returns {void}\r\n */\r\n\r\n\r\n/**\r\n * Registry of the ResizeObservation instances.\r\n *\r\n * @private {Map<Element, ResizeObservation>}\r\n */\r\n\r\n\r\n/**\r\n * Public ResizeObserver instance which will be passed to the callback\r\n * function and used as a value of it's \"this\" binding.\r\n *\r\n * @private {ResizeObserver}\r\n */\r\n\r\n/**\r\n * Collection of resize observations that have detected changes in dimensions\r\n * of elements.\r\n *\r\n * @private {Array<ResizeObservation>}\r\n */\r\nResizeObserverSPI.prototype.observe = function (target) {\r\n    if (!arguments.length) {\r\n        throw new TypeError('1 argument required, but only 0 present.');\r\n    }\r\n\r\n    // Do nothing if current environment doesn't have the Element interface.\r\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n        return;\r\n    }\r\n\r\n    if (!(target instanceof getWindowOf(target).Element)) {\r\n        throw new TypeError('parameter 1 is not of type \"Element\".');\r\n    }\r\n\r\n    var observations = this.observations_;\r\n\r\n    // Do nothing if element is already being observed.\r\n    if (observations.has(target)) {\r\n        return;\r\n    }\r\n\r\n    observations.set(target, new ResizeObservation(target));\r\n\r\n    this.controller_.addObserver(this);\r\n\r\n    // Force the update of observations.\r\n    this.controller_.refresh();\r\n};\r\n\r\n/**\r\n * Stops observing provided element.\r\n *\r\n * @param {Element} target - Element to stop observing.\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.unobserve = function (target) {\r\n    if (!arguments.length) {\r\n        throw new TypeError('1 argument required, but only 0 present.');\r\n    }\r\n\r\n    // Do nothing if current environment doesn't have the Element interface.\r\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n        return;\r\n    }\r\n\r\n    if (!(target instanceof getWindowOf(target).Element)) {\r\n        throw new TypeError('parameter 1 is not of type \"Element\".');\r\n    }\r\n\r\n    var observations = this.observations_;\r\n\r\n    // Do nothing if element is not being observed.\r\n    if (!observations.has(target)) {\r\n        return;\r\n    }\r\n\r\n    observations.delete(target);\r\n\r\n    if (!observations.size) {\r\n        this.controller_.removeObserver(this);\r\n    }\r\n};\r\n\r\n/**\r\n * Stops observing all elements.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.disconnect = function () {\r\n    this.clearActive();\r\n    this.observations_.clear();\r\n    this.controller_.removeObserver(this);\r\n};\r\n\r\n/**\r\n * Collects observation instances the associated element of which has changed\r\n * it's content rectangle.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.gatherActive = function () {\r\n        var this$1 = this;\r\n\r\n    this.clearActive();\r\n\r\n    this.observations_.forEach(function (observation) {\r\n        if (observation.isActive()) {\r\n            this$1.activeObservations_.push(observation);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Invokes initial callback function with a list of ResizeObserverEntry\r\n * instances collected from active resize observations.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.broadcastActive = function () {\r\n    // Do nothing if observer doesn't have active observations.\r\n    if (!this.hasActive()) {\r\n        return;\r\n    }\r\n\r\n    var ctx = this.callbackCtx_;\r\n\r\n    // Create ResizeObserverEntry instance for every active observation.\r\n    var entries = this.activeObservations_.map(function (observation) {\r\n        return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n    });\r\n\r\n    this.callback_.call(ctx, entries, ctx);\r\n    this.clearActive();\r\n};\r\n\r\n/**\r\n * Clears the collection of active observations.\r\n *\r\n * @returns {void}\r\n */\r\nResizeObserverSPI.prototype.clearActive = function () {\r\n    this.activeObservations_.splice(0);\r\n};\r\n\r\n/**\r\n * Tells whether observer has active observations.\r\n *\r\n * @returns {boolean}\r\n */\r\nResizeObserverSPI.prototype.hasActive = function () {\r\n    return this.activeObservations_.length > 0;\r\n};\r\n\r\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = function(callback) {\r\n    if (!(this instanceof ResizeObserver)) {\r\n        throw new TypeError('Cannot call a class as a function.');\r\n    }\r\n    if (!arguments.length) {\r\n        throw new TypeError('1 argument required, but only 0 present.');\r\n    }\r\n\r\n    var controller = ResizeObserverController.getInstance();\r\n    var observer = new ResizeObserverSPI(callback, controller, this);\r\n\r\n    observers.set(this, observer);\r\n};\r\n\r\n// Expose public methods of ResizeObserver.\r\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        return (ref = observers.get(this))[method].apply(ref, arguments);\r\n        var ref;\r\n    };\r\n});\r\n\r\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n\r\n    global$1.ResizeObserver = ResizeObserver;\r\n\r\n    return ResizeObserver;\r\n})();\r\n\r\nreturn index;\r\n\r\n})));\r\n"]},"metadata":{},"sourceType":"script"}